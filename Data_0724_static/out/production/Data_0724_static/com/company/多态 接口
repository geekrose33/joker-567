# java: 封装 继承 多态
### 多态
多态是继承 封装之后面向对象的第三大特性
同一种行为 具有不同的表现形式
‘前提’
- 继承或者实现【二选一】
- 方法的重写 【意义体现： 不重写无意义】
- 父类引用指向子类对象【格式的体现】
### 体现
体现的格式
```
父类类型 变量名 = new 子类对象；
变量名.方法名
```
> 父类类型 指子类对象是继承的父类类型 或者 实现的父接口类型
```
Fu f = new Zi();
f.method();
```

父类引用指向子类对象
### 当使用多态方式调用方法时 首先检查父类中是否有该方法 如果没有
则编译错误 如果有 执行的是子类重写后的方法

### 多态的好处
在实际的开发过程中 父类类型作为方法的形式参数 传递子类对象给方法
进行方法的调用 更能体现出多态的扩展性与遍历性

由于多态特性的支持 showAnimalEat方法的Animal类型 是Cat Dog的父类类型
父类类型接收子类对象 当然可以把 cat （对象） 和 （dog） 对象传递给放过发
当eat方法执行时 多态规定 执行的是子类重写的方法 那么效果与showCatEat和
showDogEat方法一致
不仅仅是替代 在扩展性方面 无论之后再多的子类出现 我们都不需要编写showXXXEat方法了
直接使用showAnimalEat都可以完成

所以多态的好处使程序编写简单 并有良好的扩展性

## 引用类型的转换
### 向上转型
- 向上转型 当父类类型指向子类对象时

### 向下转型
父类类型向子类类型向下转化的过程 强制的
```
子类类型 变量名 = （子类类型）父类变量名();
```

### 为什么转型
当使用多态方式调用方法时，首先检查父类中是否有该方法 如果没有
则编译错误 也就是说不能调用子类拥有而父类没有的方法 编译都错误
跟别说运行了 所以 想要调用子类特有的方法 必须向下转型

# 接口（Interface）
是Java中一种引用类型 是方法集合 如果类的内部封装了成员变量 构造方法
和成员方法 那么接口的内部主要就是封装了方法
- 包含抽象方法（JDK7以前）
- 默认方法和静态方法（JDK8）
- 私有方法（JDK9）
接口也会编译成.class 但是接口不是类 而是另外一种引用类型
使用接口不能创建对象 但是可以被实现 类似继承 一个实现接口的类
同样需要实现接口的所有抽象方法 否则他必须是一个抽象类
### 定义格式
```
public interface 接口名{
// 抽象方法
// 默认方法
// 静态方法
// 私有方法
}
```

抽象方法 可以省略abstract
### 含有默认方法和静态方法
- 默认方法使用default 不可省略 供子类调用或者子类重写
- 静态方法 使用static修饰

### 含有私有方法和私有静态方法
供接口中的默认方法或者静态方法调用
```

```

### 基本实现
类与解耦的关系为实现关系 即类实现接口 该类叫做实现类 也可以被称为
接口的子类
非抽象子类实现接口：
1. 必须重写接口中所有的抽象方法
2. 继承了接口的默认方法 可以直接调用 也可以重写

### 默认方法
```
    @Override
    public void eat() {
        System.out.println("吃！");
    }

    @Override
    public void sleep() {
        System.out.println("睡！");
    }

    @Override
    public void fly() {
        System.out.println("原地起飞");
    }
```
### 静态方法和私有方法

##### 静态方法

    无法重写静态方法

##### 私有方法
- 私有方法：只有默认方法可以调用
- 私有静态：默认方法和静态方法可以调用
存在的意义：当接口中存在多个默认方法 并且方法中有重复的内容，可以抽取成一个私有方法
供默认方法调用

### 接口的多实现
一个类只能继承一个类 但那一个类可以实现多个接口

#### 抽象方法
接口中有多个抽象方法 实现类必须重写所有的抽象方法 如果抽象方法有重名的
只需要重写一次

#### 默认方法
接口中有多个默认方法 实现类都可以继承使用 如果默认方法有重名的 必须重写一次

#### 静态方法
接口中存在同名的静态方法并不会冲突 因为使用接口名调用

#### 优先级
当一个类，既然继承了一个父类 又实现了多个接口时 父类中的成员方法和接口中的默认方法重名
子类就近选择中心父类的成员方法

### 接口的多继承
一个接口可以继承多个接口 使用extends 如果有重名的 子接口只需要重写一次即可

### 总结
- 接口中 无法定义成员变量 但是可以定义常量 其值不可改变  默认使用
public static final 修饰
- 接口中 没有构造方法 不能创建对象
- 接口中 没有静态代码块

### 电脑模拟案例
分析
- USB 接口 包含开启 关闭
- 笔记本 包含运行 关机 使用USB
- 鼠标类 实现USB接口 具备点击功能
- 键盘类
### 实现
接口
```

```